/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CommunityAdminRole;

import Business.EcoSystem;
import Business.Enterprise.CommunityEnergyReserveEnterprise;
import Business.Enterprise.CommunityEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.ConsumerOrganization;
//import Business.Organization.CommunityOrganization;
import Business.Organization.Organization;
import Business.Organization.ProsumerOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PowerManagementWorkRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import Business.WorkQueueEnterprise.PowerManagementWorkRequestEnterprise;
import java.awt.CardLayout;
import static java.lang.Math.abs;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pratik
 */
public class ProsumerManageReceivingPowerJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Organization organization;
    private UserAccount userAccount;
    private int totalExcessPower;
    private int totalRequiredPower;
    private int totalRowCount;
    private EcoSystem business;
    private Network network;

    private WorkQueue workQueueProConsumer;

    private String powerfallingShortAlreadyExists;
    private String sentPowerAlreadyExists;
    private int totalCurrentExcessPower;
    private int totalPowerFallingShort;
    private int totalRemainingPower;

    /**
     * Creates new form ProsumeManageReceivingPower
     */
    public ProsumerManageReceivingPowerJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, Network network, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.business = business;
        this.network = network;
        // this.organization = (CommunityOrganization) organization; //check***
        populateTable(); //check****

        txtTotalAvailablePowerFrmProsumers.setText(Integer.toString(totalExcessPower));//(Integer.ParseInt(totalExcessPower));
        //totalRequiredPower = abs(totalRequiredPower);
        txtTotalPowerFallingShortProsumers.setText(Integer.toString(abs(totalRequiredPower)));
        //Check*** these powers should be added only for the new requests but not for the processed requests*****
        userAccount.getEmployee().getProsumer().setCurrentPowerFallingShort(totalRequiredPower);
        userAccount.getEmployee().getProsumer().setCurrentExcessPower(totalExcessPower);
//        userAccount.getEmployee().getProsumer().getCurrentExcessPower();
//        int currentPowerAtCommunity = userAccount.getEmployee().getProsumer().getCurrentExcessPower();
//        txtPowerAvailableAtCommunity.setText(Integer.toString(currentPowerAtCommunity))
        //  ;

        automateCommunityAdminRequestCompensatePower();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        refreshJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtTotalAvailablePowerFrmProsumers = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtTotalPowerFallingShortProsumers = new javax.swing.JTextField();
        BtnProcessBulkRequest = new javax.swing.JButton();
        BtnProcessEachRequest = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setBackground(new java.awt.Color(255, 255, 255));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "message", "Sender", "Receiver", "Status", "Power Available", "Power Falling Short"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        refreshJButton.setBackground(new java.awt.Color(0, 153, 102));
        refreshJButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        refreshJButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Manage Input/Receiving Power");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Total Availble Power From Prosumers");

        txtTotalAvailablePowerFrmProsumers.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("Total Power Falling Short From Consumers ");

        txtTotalPowerFallingShortProsumers.setEnabled(false);

        BtnProcessBulkRequest.setBackground(new java.awt.Color(0, 153, 102));
        BtnProcessBulkRequest.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        BtnProcessBulkRequest.setForeground(new java.awt.Color(255, 255, 255));
        BtnProcessBulkRequest.setText("Process Bulk Request");
        BtnProcessBulkRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnProcessBulkRequestActionPerformed(evt);
            }
        });

        BtnProcessEachRequest.setBackground(new java.awt.Color(0, 153, 102));
        BtnProcessEachRequest.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        BtnProcessEachRequest.setForeground(new java.awt.Color(255, 255, 255));
        BtnProcessEachRequest.setText("Process Single Request");
        BtnProcessEachRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnProcessEachRequestActionPerformed(evt);
            }
        });

        backJButton.setBackground(new java.awt.Color(0, 153, 102));
        backJButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        backJButton.setForeground(new java.awt.Color(255, 255, 255));
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(refreshJButton)
                .addGap(36, 36, 36))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnProcessEachRequest)
                        .addGap(34, 34, 34)
                        .addComponent(BtnProcessBulkRequest))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtTotalPowerFallingShortProsumers, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(40, 40, 40)
                                .addComponent(txtTotalAvailablePowerFrmProsumers, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(288, 288, 288)
                        .addComponent(jLabel1)))
                .addContainerGap(298, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addComponent(refreshJButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTotalAvailablePowerFrmProsumers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTotalPowerFallingShortProsumers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(backJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BtnProcessEachRequest)
                            .addComponent(BtnProcessBulkRequest))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        totalExcessPower = 0;
        totalRequiredPower = 0;
        model.setRowCount(0);

        for (WorkRequest request : enterprise.getWorkQueue().getWorkRequestList()) {
            if (request != null) {
                if (request.getSender().getEmployee().getCommunity().equalsIgnoreCase(enterprise.getName())) {
                    Object[] row = new Object[6];
                    row[0] = request;//org.getName();//request;
                    row[1] = request.getSender().getEmployee().getName();
                    row[2] = userAccount.getEmployee().getName();//request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();

                    request.setReceiver(userAccount); //check
                    row[3] = request.getStatus();
                    row[4] = ((PowerManagementWorkRequest) request).getProsumerSentpower();
                    row[5] = ((PowerManagementWorkRequest) request).getCurrentFalingShortPower();

                    //row[4] = ((PowerManagementWorkRequest) request).getProsumerSentpower();
                    if (request.getStatus().equalsIgnoreCase("Sent")) { //Only current requests will be handled******
                        if (((PowerManagementWorkRequest) request).getProsumerSentpower() > 0) {
                            totalExcessPower = totalExcessPower + ((PowerManagementWorkRequest) request).getProsumerSentpower();//request.getProsumerSentpower();
                            //row[4] = totalExcessPower;                       
                        } else {
                            //totalRequiredPower = totalRequiredPower + ((PowerManagementWorkRequest) request).getProsumerSentpower(); // check****
                            // As the same work queue is used for prosumer and consumer assuming only positive value for prosumer

                            totalRequiredPower = totalRequiredPower + ((PowerManagementWorkRequest) request).getCurrentFalingShortPower(); // check****
                            // row[4] = totalRequiredPower;  
                        }
                    }

                    model.addRow(row);

                }
            }
        }
           // }
        // }
        // }
        //}
        totalRowCount = model.getRowCount(); // check**** if thislogic works****

    }

    public void automateCommunityAdminRequestCompensatePower() {

        //If Automate Enabled then Compensate Power
        if (userAccount.getEmployee().getProsumer().getAutomatePowerDistribution().equalsIgnoreCase("Y")) {
            totalCurrentExcessPower = userAccount.getEmployee().getProsumer().getCurrentExcessPower();
            totalPowerFallingShort = userAccount.getEmployee().getProsumer().getCurrentPowerFallingShort();

            if (totalPowerFallingShort > userAccount.getEmployee().getProsumer().getSetThresholdForPowerSupply()) {
                powerfallingShortAlreadyExists = "N";
                sentPowerAlreadyExists = "N";

                for (Enterprise enterp : network.getEnterpriseDirectory().getEnterpriseList()) {
                    Enterprise energyConserveEnterprise = null;
                    if (enterp instanceof CommunityEnergyReserveEnterprise) {
                        energyConserveEnterprise = enterp;
                    }
                    if (energyConserveEnterprise != null) {
                        for (UserAccount ua : energyConserveEnterprise.getUserAccountDirectory().getUserAccountList()) {
                            for (PowerManagementWorkRequestEnterprise request : ua.getWorkQueueEnterprise().getWorkRequestList()) {
                                if (request.getSender().equals(userAccount)) {
                                    if (request.getStatus().equalsIgnoreCase("Sent")) {
                                        if (request.getCurrentFalingShortPower() == totalPowerFallingShort) {
                                            powerfallingShortAlreadyExists = "Y";
                                        }
                                        if (request.getCommunitySentPower() == totalCurrentExcessPower) {
                                            sentPowerAlreadyExists = "Y";
                                        }

                                    }
                                }

                            }
                        }

                    }
                }

                if ((powerfallingShortAlreadyExists == "Y") || (sentPowerAlreadyExists == "Y")) {
               // JOptionPane.showMessageDialog(this, "A request has been already raised for Community  Energy Reserve", "Bulk Requests", JOptionPane.ERROR_MESSAGE);
                    //do nothing 
                } else {

                    if ((totalCurrentExcessPower > totalPowerFallingShort) && (totalPowerFallingShort > 0)) {

            //compensate the power at the consumer level
                        //update the work queue requests for prosumer and consumer, that the request has been processed
                        //for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for (WorkRequest request : enterprise.getWorkQueue().getWorkRequestList()) {//for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
                            if (request.getStatus().equalsIgnoreCase("Sent")) {
                                if (request.getSender().getEmployee().getCommunity().equals(enterprise.getName())) {
                                    request.setMessage("Request has been Processed");
                                    request.setStatus("Processed");
                                    ((PowerManagementWorkRequest) request).setResult("Completed"); // Check**** is status should be placed as complete here itself*******

                        //For Consumer******
                                    //Need to set shortfall to zero
                                    int powerfallingShort = request.getSender().getEmployee().getProsumer().getCurrentPowerFallingShort();
                                    if (powerfallingShort > 0) {
                                        request.getSender().getEmployee().getProsumer().setCurrentPowerFallingShort(0);
                                    }
                                    //How about prosumers ???**** Check*****
                                }
                            }
                        }

                        totalRemainingPower = totalCurrentExcessPower - totalPowerFallingShort;

                        userAccount.getEmployee().getProsumer().setCurrentPowerFallingShort(0);
                        userAccount.getEmployee().getProsumer().setCurrentExcessPower(totalRemainingPower);

                        txtTotalAvailablePowerFrmProsumers.setText(String.valueOf(userAccount.getEmployee().getProsumer().getCurrentExcessPower()));
                        txtTotalPowerFallingShortProsumers.setText(String.valueOf(userAccount.getEmployee().getProsumer().getCurrentPowerFallingShort()));

//            if (dialogResult == JOptionPane.YES_OPTION) {
//                int flagYes = JOptionPane.YES_NO_OPTION;
//                int dialogResultYes = JOptionPane.showConfirmDialog(null, "Would you like to Send the Remaining  Power to City Admin ? Please click Yes, else the Power would be sent to Energy Reserve",
//                        "Warning", flag);
                        //  if (dialogResultYes == JOptionPane.YES_OPTION) {
                        //send power to city admin through a request 
                        //PowerManagementWorkRequest communityRequestComp = new PowerManagementWorkRequest();
                        PowerManagementWorkRequestEnterprise communityRequestComp = new PowerManagementWorkRequestEnterprise();

                        communityRequestComp.setCommunitySentPower(totalRemainingPower);
                        communityRequestComp.setCurrentFalingShortPower(0);// check******(request.getCurrentFalingShortPower()); //power that is falling short - prosumer does not have any defficiency in power*
                        communityRequestComp.setSender(userAccount);//(request.getReceiver());
                        communityRequestComp.setStatus("Sent");
                        communityRequestComp.setBulkRequest("Y");
                        communityRequestComp.setCommunityEnterprise((CommunityEnterprise) enterprise);

                        if (enterprise != null) {
                            userAccount.getWorkQueueEnterprise().getWorkRequestList().add(communityRequestComp);
                            network.getWorkQueueEnterprise().getWorkRequestList().add(communityRequestComp);

                        }
                   // populateTable();
                        // } 
                        // }

                        //Give an option to send the remaining power to city or community reserve
                    }

                    if (totalCurrentExcessPower < totalPowerFallingShort) {

                //send request to city Admin
                        //PowerManagementWorkRequest communityRequestComp = new PowerManagementWorkRequest();
                        PowerManagementWorkRequestEnterprise communityRequestComp = new PowerManagementWorkRequestEnterprise();
                        communityRequestComp.setCommunitySentPower(0);
                        communityRequestComp.setCurrentFalingShortPower(totalPowerFallingShort - totalCurrentExcessPower);// check******(request.getCurrentFalingShortPower()); //power that is falling short - prosumer does not have any defficiency in power*
                        communityRequestComp.setSender(userAccount);//(request.getReceiver());
                        communityRequestComp.setStatus("Sent");
                        communityRequestComp.setBulkRequest("Y");
                        communityRequestComp.setCommunityEnterprise((CommunityEnterprise) enterprise);

                        // communityRequestComp.setWorkQueue(workQueueProConsumer);
                        if (enterprise != null) {
                            //Check*******
//                    enterprise.getWorkQueue().getWorkRequestList().add(communityRequestComp);//.add(request);
//                    userAccount.getWorkQueue().getWorkRequestList().add(communityRequestComp);//.add(request);

                            for (WorkRequest request : enterprise.getWorkQueue().getWorkRequestList()) {//for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
                                if (request.getStatus().equalsIgnoreCase("Sent")) {
                                    if (request.getSender().getEmployee().getCommunity().equals(enterprise.getName())) {
                                        //request.setMessage("Request has been Processed");
                                        request.setStatus("Processing");
                                    }
                                }
                            }
                            //check if this needs to be addedat user account of community
                            network.getWorkQueueEnterprise().getWorkRequestList().add(communityRequestComp);
                            //       JOptionPane.showMessageDialog(this, "Request has been sent to City Admin for Short Fall of Power", "Send Power", JOptionPane.INFORMATION_MESSAGE);
                        }
             //   populateTable();

                    }

                }
            }//donothing

            populateTable();
        }
    }
    private void BtnProcessBulkRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnProcessBulkRequestActionPerformed

        if (totalRowCount == 0) {
            JOptionPane.showMessageDialog(this, "There are no Requests to perform Bulk Requests", "Bulk Requests", JOptionPane.ERROR_MESSAGE);
            return;
        }

        ProcessBulkWorkRequestJPanel processBulkWorkRequest = new ProcessBulkWorkRequestJPanel(userProcessContainer, userAccount, totalExcessPower, totalRequiredPower, enterprise, network, workQueueProConsumer);
        userProcessContainer.add("processBulkWorkRequest", processBulkWorkRequest);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);


    }//GEN-LAST:event_BtnProcessBulkRequestActionPerformed

    private void BtnProcessEachRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnProcessEachRequestActionPerformed
        // TODO add your handling code here:

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "There are no Requests to process", "Single Requests", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(userAccount.getEmployee().getProsumer().getCurrentPowerFallingShort() > 0){
            JOptionPane.showMessageDialog(this, "Community is falling short of some power, please compensate the power in Bulk Process", "Single Requests", JOptionPane.ERROR_MESSAGE);
            return;
        }

        PowerManagementWorkRequest request = (PowerManagementWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        if (request != null) {
            if (request.getStatus().equals("Sent")) {
                int powerfallingshortCheck = request.getSender().getEmployee().getProsumer().getCurrentPowerFallingShort();

                if (powerfallingshortCheck > 0) {
                    //Consumer has been selected
                    JOptionPane.showMessageDialog(this, "Consumer requests are processed only in Bulk, Please select a Prosumer Request to process ", "Single Request", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    //Prosumer has been selected   

                    ProcessEachWorkRequestJPanel processWorkRequestJPanel = new ProcessEachWorkRequestJPanel(userProcessContainer, userAccount, request, enterprise, network, business);
                    userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    layout.next(userProcessContainer);
                }
            } else {
                JOptionPane.showMessageDialog(this, "The selected Request is either Processed or under Processing, Please select a new Request", "Single Requests", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_BtnProcessEachRequestActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnProcessBulkRequest;
    private javax.swing.JButton BtnProcessEachRequest;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTextField txtTotalAvailablePowerFrmProsumers;
    private javax.swing.JTextField txtTotalPowerFallingShortProsumers;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
