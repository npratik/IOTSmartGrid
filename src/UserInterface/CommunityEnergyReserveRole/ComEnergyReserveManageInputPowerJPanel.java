/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CommunityEnergyReserveRole;

import Business.Enterprise.CommunityEnergyReserveEnterprise;
import Business.Enterprise.CommunityEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PowerManagementWorkRequest;
import Business.WorkQueueEnterprise.PowerManagementWorkRequestEnterprise;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pratik
 */
public class ComEnergyReserveManageInputPowerJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private CommunityEnergyReserveEnterprise enterprise;
    //private CommunityOrganization organization;  
    private UserAccount userAccount;
    private Network network;
    private int totalPowerFromCommunity;
    private int totalPowerFallingShortfromCommunity;
    private int totalRowCount;
    private String sentRequestsAvailable;
    private String powerCompensated;

    /**
     * Creates new form ComEnergyReserveManageInputPower
     */
    public ComEnergyReserveManageInputPowerJPanel(JPanel userProcessContainer, UserAccount userAccount, CommunityEnergyReserveEnterprise enterprise, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.network = network;
        populateTable();

        txtTotalAvailablePowerFrmCommunity.setText(Integer.toString(totalPowerFromCommunity));
        txtTotalPowerFallingShortCommunity.setText(Integer.toString(totalPowerFallingShortfromCommunity));
        txtTotalAvailablePowerAtEnergyConserve.setText(Integer.toString(userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower()));

        //userAccount.getEmployee().getProsumer().setCurrentPowerFallingShort(totalRequiredPower);
        //userAccount.getEmployee().getProsumer().setCurrentExcessPower(totalExcessPower);
        processEnergyConserveWorkRequest();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
//        totalExcessPower = 0;
//        totalRequiredPower = 0;
        model.setRowCount(0);

        totalPowerFromCommunity = 0;
        totalPowerFallingShortfromCommunity = 0;
        for (PowerManagementWorkRequestEnterprise request : userAccount.getWorkQueueEnterprise().getWorkRequestList()) {

            Object[] row = new Object[6];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = userAccount.getEmployee().getName();//" ";
            //userAccount.getEmployee().getName();//request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            request.setReceiver(userAccount);
            //request.setReceiver(userAccount); //check***
            row[3] = request.getStatus();
            //testing Check***** start
            row[4] = request.getCommunitySentPower();//((PowerManagementWorkRequestEnterprise) request).getCommunitySentPower();
            row[5] = request.getCurrentFalingShortPower();
            model.addRow(row);
            //}

            //Very Imp**** Check****these values******
            if (request.getStatus().equalsIgnoreCase("Sent")) {
                sentRequestsAvailable = "Y";
                totalPowerFromCommunity = totalPowerFromCommunity + request.getCommunitySentPower();
                totalPowerFallingShortfromCommunity = totalPowerFallingShortfromCommunity + request.getCurrentFalingShortPower();
            }

        }
        totalRowCount = model.getRowCount();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        refreshJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtTotalAvailablePowerFrmCommunity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtTotalPowerFallingShortCommunity = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtTotalAvailablePowerAtEnergyConserve = new javax.swing.JTextField();
        BtnProcessBulkRequest = new javax.swing.JButton();
        BtnProcessEachRequest = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Power Available", "Power Shortfall"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        refreshJButton.setBackground(new java.awt.Color(0, 153, 102));
        refreshJButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setText("Manage Input/Receiving Power");

        backJButton.setBackground(new java.awt.Color(0, 153, 102));
        backJButton.setForeground(new java.awt.Color(255, 255, 255));
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 153));
        jLabel2.setText("Total Availble Power From Community");

        txtTotalAvailablePowerFrmCommunity.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 153));
        jLabel3.setText("Total Power Falling Short From Community ");

        txtTotalPowerFallingShortCommunity.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 153));
        jLabel4.setText("Total PowerAvailable at Energy Conserve ");

        txtTotalAvailablePowerAtEnergyConserve.setEnabled(false);

        BtnProcessBulkRequest.setBackground(new java.awt.Color(0, 153, 102));
        BtnProcessBulkRequest.setForeground(new java.awt.Color(255, 255, 255));
        BtnProcessBulkRequest.setText("Process Bulk Request");
        BtnProcessBulkRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnProcessBulkRequestActionPerformed(evt);
            }
        });

        BtnProcessEachRequest.setBackground(new java.awt.Color(0, 153, 102));
        BtnProcessEachRequest.setForeground(new java.awt.Color(255, 255, 255));
        BtnProcessEachRequest.setText("Process Single Request");
        BtnProcessEachRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnProcessEachRequestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshJButton)
                .addGap(71, 71, 71))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 787, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BtnProcessEachRequest)
                                .addGap(34, 34, 34)
                                .addComponent(BtnProcessBulkRequest))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtTotalAvailablePowerAtEnergyConserve, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtTotalPowerFallingShortCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(40, 40, 40)
                                    .addComponent(txtTotalAvailablePowerFrmCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(238, 238, 238)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refreshJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTotalAvailablePowerFrmCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTotalPowerFallingShortCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTotalAvailablePowerAtEnergyConserve, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnProcessEachRequest)
                    .addComponent(BtnProcessBulkRequest))
                .addGap(6, 6, 6)
                .addComponent(backJButton)
                .addGap(27, 27, 27))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    public void processEnergyConserveWorkRequest() {

        //Threshhold check condition*****
        //If Automate Enabled then Compensate Power
        if (userAccount.getEmployee().getProsumer().getAutomatePowerDistribution().equalsIgnoreCase("Y")) {
            if (totalPowerFallingShortfromCommunity > userAccount.getEmployee().getProsumer().getSetThresholdForPowerSupply()) {
                for (PowerManagementWorkRequestEnterprise energyConserveRequest : userAccount.getWorkQueueEnterprise().getWorkRequestList()) {
                    if (energyConserveRequest != null) {
                        if (energyConserveRequest.getStatus().equals("Sent")) {
                            int communitySentPower = energyConserveRequest.getCommunitySentPower();
                            int communityShortFall = energyConserveRequest.getCurrentFalingShortPower();
                            int currentEnergyReservePower = userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower();

                            int resultantPowerAtEnergyReserve = 0;
                            int currentTotalCommunityPower = 0;
                            int netPowerCommunityPower = 0;
                            if ((communitySentPower > 0) && (communityShortFall == 0)) { //Check* ==0 ******
                                //update the community and energy Reserve Power*****
                                //Also the requests of community and Energy Reserve*
                                resultantPowerAtEnergyReserve = currentEnergyReservePower + communitySentPower;

                                //increase energy reserve power
                                userAccount.getEmployee().getProsumer().setEnergyConserveAvailablePower(resultantPowerAtEnergyReserve);

                                //Decrease community power
                                currentTotalCommunityPower = energyConserveRequest.getSender().getEmployee().getProsumer().getCurrentExcessPower();
                                netPowerCommunityPower = currentTotalCommunityPower - communitySentPower;
                                energyConserveRequest.getSender().getEmployee().getProsumer().setCurrentExcessPower(netPowerCommunityPower);
                    //userAccount.getEmployee().getProsumer().setCurrentExcessPower(totalExcessPower);                           
                                //energyConserveRequest.getSender().getEmployee().getProsumer().get

                                energyConserveRequest.setStatus("Processed");
                                energyConserveRequest.setResult("Accepted");
                                energyConserveRequest.setMessage("Request has been Processed");

                                powerCompensated = "N";
                                if (energyConserveRequest.getBulkRequest().equals("N")) {
                                    energyConserveRequest.getPowerManagementWorkRequest().setResult("Accepted");
                                    energyConserveRequest.getPowerManagementWorkRequest().setStatus("Processed");
                                    energyConserveRequest.getPowerManagementWorkRequest().setMessage("Request has been Processed");
                                    powerCompensated = "Y";
                                } else { //Bulk Process*****
                                    //if (communityEnterprise != null) {
                                    if (energyConserveRequest.getCommunityEnterprise() != null) {
                                        //for (WorkRequest WR : communityEnterprise.getWorkQueue().getWorkRequestList()) {
                                        for (WorkRequest WR : energyConserveRequest.getCommunityEnterprise().getWorkQueue().getWorkRequestList()) {
                                            if (WR.getStatus().equalsIgnoreCase("Processing")) {
                                                if (WR.getReceiver().equals(energyConserveRequest.getSender())) {//Check****
                                                    if (WR.getSender().getEmployee().getCommunity().equalsIgnoreCase(energyConserveRequest.getCommunityEnterprise().getName())) {
                                                        WR.setStatus("Processed");
                                                        WR.setMessage("Request has been Processed");
                                                        ((PowerManagementWorkRequest) WR).setResult("Accepted");
                                                        powerCompensated = "Y";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                // populateTable();
                                if (powerCompensated == "Y") {
                                    energyConserveRequest.setReceiver(userAccount); //Setting Receiver once the request is processed
                                    //   JOptionPane.showMessageDialog(this, "The selected Request is Processed", "Single Requests", JOptionPane.INFORMATION_MESSAGE);
                                    // Removing message as it is abulk process***
                                }
//                        txtTotalAvailablePowerFrmCommunity.setText(Integer.toString(totalPowerFromCommunity));
//                        txtTotalPowerFallingShortCommunity.setText(Integer.toString(0));
//                        txtTotalAvailablePowerAtEnergyConserve.setText(Integer.toString(userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower()));
                            }
                            //Add Logic for Community Short Fall****
                            resultantPowerAtEnergyReserve = 0;
                            currentTotalCommunityPower = 0;
                            netPowerCommunityPower = 0;
                            if (communityShortFall > 0) {

                                if (currentEnergyReservePower < communityShortFall) {
                                    JOptionPane.showMessageDialog(this, "Power at Energy Reserve is falling Short, Thisrequest should be processed by another Community Reserve", "Single Request", JOptionPane.ERROR_MESSAGE);   //Check if any other flow can be performed here *****
                                    return;
                                }

                                resultantPowerAtEnergyReserve = currentEnergyReservePower - communityShortFall;

                                userAccount.getEmployee().getProsumer().setEnergyConserveAvailablePower(resultantPowerAtEnergyReserve);

                                //Increase community power
                                currentTotalCommunityPower = energyConserveRequest.getSender().getEmployee().getProsumer().getCurrentExcessPower();
                                netPowerCommunityPower = currentTotalCommunityPower + communityShortFall;
                                energyConserveRequest.getSender().getEmployee().getProsumer().setCurrentExcessPower(netPowerCommunityPower);
                    //userAccount.getEmployee().getProsumer().setCurrentExcessPower(totalExcessPower);                           
                                //energyConserveRequest.getSender().getEmployee().getProsumer().get

                                energyConserveRequest.setStatus("Processed");
                                energyConserveRequest.setResult("Accepted");
                                energyConserveRequest.setMessage("Request has been Processed");

                                String powerCompensated = "N";
                                if (energyConserveRequest.getBulkRequest().equals("N")) {
                        //Single consumer request are not processed, so we might not need additional logic as written in else part
                                    //check*****
                                    energyConserveRequest.getPowerManagementWorkRequest().setResult("Accepted");
                                    energyConserveRequest.getPowerManagementWorkRequest().setStatus("Processed");
                                    energyConserveRequest.getPowerManagementWorkRequest().setMessage("Request has been Processed");
                                    powerCompensated = "Y";
                                } else {
                                    //if (communityEnterprise != null) {
                                    if (energyConserveRequest.getCommunityEnterprise() != null) {
                                        for (WorkRequest WR : energyConserveRequest.getCommunityEnterprise().getWorkQueue().getWorkRequestList()) {
                                            if (WR.getStatus().equalsIgnoreCase("Processing")) {
                                                if (WR.getReceiver().equals(energyConserveRequest.getSender())) {//Check****
                                                    if (WR.getSender().getEmployee().getCommunity().equalsIgnoreCase(energyConserveRequest.getCommunityEnterprise().getName())) {
                                                        WR.setStatus("Processed");
                                                        WR.setMessage("Request has been Processed");
                                                        int curExcessPower = WR.getSender().getEmployee().getProsumer().getCurrentExcessPower();
                                                        int curFallingShorPower = WR.getSender().getEmployee().getProsumer().getCurrentPowerFallingShort();

                                                        if (curFallingShorPower > 0) {
                                                            ((PowerManagementWorkRequest) WR).setResult("Compensated");
                                                            WR.getSender().getEmployee().getProsumer().setCurrentPowerFallingShort(0);
                                                        } else {
                                                            ((PowerManagementWorkRequest) WR).setResult("Accepted");
                                                            WR.getSender().getEmployee().getProsumer().setCurrentExcessPower(0);
                                                            powerCompensated = "Y";
                                                        }
                                            //energyConserveRequest.setStatus("Processed");
                                                        //energyConserveRequest.setResult("Accepted");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                populateTable();

                                if (powerCompensated == "Y") {
                                    energyConserveRequest.setReceiver(userAccount); //Setting Receiver once the request is processed
                                    //JOptionPane.showMessageDialog(this, "The selected Request is Processed", "Single Requests", JOptionPane.INFORMATION_MESSAGE);
                                }
//                        txtTotalAvailablePowerFrmCommunity.setText(Integer.toString(totalPowerFromCommunity));
//                        txtTotalPowerFallingShortCommunity.setText(Integer.toString(totalPowerFallingShortfromCommunity));
//                        txtTotalAvailablePowerAtEnergyConserve.setText(Integer.toString(userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower()));
                            }
                            txtTotalAvailablePowerFrmCommunity.setText(Integer.toString(totalPowerFromCommunity));
                            txtTotalPowerFallingShortCommunity.setText(Integer.toString(totalPowerFallingShortfromCommunity));
                            txtTotalAvailablePowerAtEnergyConserve.setText(Integer.toString(userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower()));
//                } else {
//                    JOptionPane.showMessageDialog(this, "The selected Request is either Processed or under Processing, Please select a new Request", "Single Requests", JOptionPane.ERROR_MESSAGE);
//                    return;
                        }

                    }

                    populateTable();
                    txtTotalAvailablePowerFrmCommunity.setText(Integer.toString(totalPowerFromCommunity));
                    txtTotalPowerFallingShortCommunity.setText(Integer.toString(totalPowerFallingShortfromCommunity));
                    txtTotalAvailablePowerAtEnergyConserve.setText(Integer.toString(userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower()));
                }

                //check if this Message Box is to be placed ??
                if (powerCompensated != null) {
                    JOptionPane.showMessageDialog(this, "Bulk Request has been Processed", "Bulk Requests", JOptionPane.INFORMATION_MESSAGE);
                }
            }//threshold check comdition****
        }
    }
    private void BtnProcessBulkRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnProcessBulkRequestActionPerformed

        //Remove Bulk Process from this
        if (totalRowCount == 0) {
            JOptionPane.showMessageDialog(this, "There are no Requests to perform Bulk Requests", "Bulk Requests", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Enterprise communityEnterprise = null;
        for (Enterprise enter : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (enter instanceof CommunityEnterprise) {
                communityEnterprise = enter;
            }
        }

        if (sentRequestsAvailable == "Y") {

        } else {
            JOptionPane.showMessageDialog(this, "There are No Sent Request to Process", "Bulk Requests", JOptionPane.ERROR_MESSAGE); //Test*****
            return;
        }
        //for (PowerManagementWorkRequestEnterprise energyConserveRequest : enterprise.getWorkQueueEnterprise().getWorkRequestList()) {
        for (PowerManagementWorkRequestEnterprise energyConserveRequest : userAccount.getWorkQueueEnterprise().getWorkRequestList()) {
            if (energyConserveRequest != null) {
                if (energyConserveRequest.getStatus().equals("Sent")) {
                    int communitySentPower = energyConserveRequest.getCommunitySentPower();
                    int communityShortFall = energyConserveRequest.getCurrentFalingShortPower();
                    int currentEnergyReservePower = userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower();

                    int resultantPowerAtEnergyReserve = 0;
                    int currentTotalCommunityPower = 0;
                    int netPowerCommunityPower = 0;
                    if ((communitySentPower > 0) && (communityShortFall == 0)) { //Check* ==0 ******
                        //update the community and energy Reserve Power*****
                        //Also the requests of community and Energy Reserve*
                        resultantPowerAtEnergyReserve = currentEnergyReservePower + communitySentPower;

                        //increase energy reserve power
                        userAccount.getEmployee().getProsumer().setEnergyConserveAvailablePower(resultantPowerAtEnergyReserve);

                        //Decrease community power
                        currentTotalCommunityPower = energyConserveRequest.getSender().getEmployee().getProsumer().getCurrentExcessPower();
                        netPowerCommunityPower = currentTotalCommunityPower - communitySentPower;
                        energyConserveRequest.getSender().getEmployee().getProsumer().setCurrentExcessPower(netPowerCommunityPower);
                        //userAccount.getEmployee().getProsumer().setCurrentExcessPower(totalExcessPower);                           
                        //energyConserveRequest.getSender().getEmployee().getProsumer().get

                        energyConserveRequest.setStatus("Processed");
                        energyConserveRequest.setResult("Accepted");
                        energyConserveRequest.setMessage("Request has been Processed");

                        powerCompensated = "N";
                        if (energyConserveRequest.getBulkRequest().equals("N")) {
                            energyConserveRequest.getPowerManagementWorkRequest().setResult("Accepted");
                            energyConserveRequest.getPowerManagementWorkRequest().setStatus("Processed");
                            energyConserveRequest.getPowerManagementWorkRequest().setMessage("Request has been Processed");
                            powerCompensated = "Y";
                        } else { //Bulk Process*****
                            //if (communityEnterprise != null) {
                            if (energyConserveRequest.getCommunityEnterprise() != null) {
                                //for (WorkRequest WR : communityEnterprise.getWorkQueue().getWorkRequestList()) {
                                for (WorkRequest WR : energyConserveRequest.getCommunityEnterprise().getWorkQueue().getWorkRequestList()) {
                                    if (WR.getStatus().equalsIgnoreCase("Processing")) {
                                        if (WR.getReceiver().equals(energyConserveRequest.getSender())) {//Check****
                                            if (WR.getSender().getEmployee().getCommunity().equalsIgnoreCase(energyConserveRequest.getCommunityEnterprise().getName())) {
                                                WR.setStatus("Processed");
                                                WR.setMessage("Request has been Processed");
                                                ((PowerManagementWorkRequest) WR).setResult("Accepted");
                                                powerCompensated = "Y";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        // populateTable();
                        if (powerCompensated == "Y") {
                            energyConserveRequest.setReceiver(userAccount); //Setting Receiver once the request is processed
                            //   JOptionPane.showMessageDialog(this, "The selected Request is Processed", "Single Requests", JOptionPane.INFORMATION_MESSAGE);
                            // Removing message as it is abulk process***
                        }
//                        txtTotalAvailablePowerFrmCommunity.setText(Integer.toString(totalPowerFromCommunity));
//                        txtTotalPowerFallingShortCommunity.setText(Integer.toString(0));
//                        txtTotalAvailablePowerAtEnergyConserve.setText(Integer.toString(userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower()));
                    }
                    //Add Logic for Community Short Fall****
                    resultantPowerAtEnergyReserve = 0;
                    currentTotalCommunityPower = 0;
                    netPowerCommunityPower = 0;
                    if (communityShortFall > 0) {

                        if (currentEnergyReservePower < communityShortFall) {
                            JOptionPane.showMessageDialog(this, "Power at Energy Reserve is falling Short, Thisrequest should be processed by another Community Reserve", "Single Request", JOptionPane.ERROR_MESSAGE);   //Check if any other flow can be performed here *****
                            return;
                        }

                        resultantPowerAtEnergyReserve = currentEnergyReservePower - communityShortFall;

                        userAccount.getEmployee().getProsumer().setEnergyConserveAvailablePower(resultantPowerAtEnergyReserve);

                        //Increase community power
                        currentTotalCommunityPower = energyConserveRequest.getSender().getEmployee().getProsumer().getCurrentExcessPower();
                        netPowerCommunityPower = currentTotalCommunityPower + communityShortFall;
                        energyConserveRequest.getSender().getEmployee().getProsumer().setCurrentExcessPower(netPowerCommunityPower);
                        //userAccount.getEmployee().getProsumer().setCurrentExcessPower(totalExcessPower);                           
                        //energyConserveRequest.getSender().getEmployee().getProsumer().get

                        energyConserveRequest.setStatus("Processed");
                        energyConserveRequest.setResult("Accepted");
                        energyConserveRequest.setMessage("Request has been Processed");

                        String powerCompensated = "N";
                        if (energyConserveRequest.getBulkRequest().equals("N")) {
                            //Single consumer request are not processed, so we might not need additional logic as written in else part
                            //check*****
                            energyConserveRequest.getPowerManagementWorkRequest().setResult("Accepted");
                            energyConserveRequest.getPowerManagementWorkRequest().setStatus("Processed");
                            energyConserveRequest.getPowerManagementWorkRequest().setMessage("Request has been Processed");
                            powerCompensated = "Y";
                        } else {
                            //if (communityEnterprise != null) {
                            if (energyConserveRequest.getCommunityEnterprise() != null) {
                                for (WorkRequest WR : energyConserveRequest.getCommunityEnterprise().getWorkQueue().getWorkRequestList()) {
                                    if (WR.getStatus().equalsIgnoreCase("Processing")) {
                                        if (WR.getReceiver().equals(energyConserveRequest.getSender())) {//Check****
                                            if (WR.getSender().getEmployee().getCommunity().equalsIgnoreCase(energyConserveRequest.getCommunityEnterprise().getName())) {
                                                WR.setStatus("Processed");
                                                WR.setMessage("Request has been Processed");
                                                int curExcessPower = WR.getSender().getEmployee().getProsumer().getCurrentExcessPower();
                                                int curFallingShorPower = WR.getSender().getEmployee().getProsumer().getCurrentPowerFallingShort();

                                                if (curFallingShorPower > 0) {
                                                    ((PowerManagementWorkRequest) WR).setResult("Compensated");
                                                    WR.getSender().getEmployee().getProsumer().setCurrentPowerFallingShort(0);
                                                } else {
                                                    ((PowerManagementWorkRequest) WR).setResult("Accepted");
                                                    WR.getSender().getEmployee().getProsumer().setCurrentExcessPower(0);
                                                    powerCompensated = "Y";
                                                }
                                                //energyConserveRequest.setStatus("Processed");
                                                //energyConserveRequest.setResult("Accepted");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        populateTable();

                        if (powerCompensated == "Y") {
                            energyConserveRequest.setReceiver(userAccount); //Setting Receiver once the request is processed
                            //JOptionPane.showMessageDialog(this, "The selected Request is Processed", "Single Requests", JOptionPane.INFORMATION_MESSAGE);
                        }
//                        txtTotalAvailablePowerFrmCommunity.setText(Integer.toString(totalPowerFromCommunity));
//                        txtTotalPowerFallingShortCommunity.setText(Integer.toString(totalPowerFallingShortfromCommunity));
//                        txtTotalAvailablePowerAtEnergyConserve.setText(Integer.toString(userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower()));
                    }
                    txtTotalAvailablePowerFrmCommunity.setText(Integer.toString(totalPowerFromCommunity));
                    txtTotalPowerFallingShortCommunity.setText(Integer.toString(totalPowerFallingShortfromCommunity));
                    txtTotalAvailablePowerAtEnergyConserve.setText(Integer.toString(userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower()));
//                } else {
//                    JOptionPane.showMessageDialog(this, "The selected Request is either Processed or under Processing, Please select a new Request", "Single Requests", JOptionPane.ERROR_MESSAGE);
//                    return;
                }

            }

            populateTable();
            txtTotalAvailablePowerFrmCommunity.setText(Integer.toString(totalPowerFromCommunity));
            txtTotalPowerFallingShortCommunity.setText(Integer.toString(totalPowerFallingShortfromCommunity));
            txtTotalAvailablePowerAtEnergyConserve.setText(Integer.toString(userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower()));
        }

        if (powerCompensated != null) {
            JOptionPane.showMessageDialog(this, "Bulk Request has been Processed", "Bulk Requests", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_BtnProcessBulkRequestActionPerformed

    private void BtnProcessEachRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnProcessEachRequestActionPerformed
        // TODO add your handling code here:

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "There are no Requests to process, Please select a request", "Single Requests", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Enterprise communityEnterprise = null;
        for (Enterprise enter : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (enter instanceof CommunityEnterprise) {
                communityEnterprise = enter;
            }
        }

        PowerManagementWorkRequestEnterprise energyConserveRequest = (PowerManagementWorkRequestEnterprise) workRequestJTable.getValueAt(selectedRow, 0);
        if (energyConserveRequest != null) {
            if (energyConserveRequest.getStatus().equals("Sent")) { // Request is Still Not Processed******
                //int powerfallingshortCheck = request.getSender().getEmployee().getProsumer().getCurrentPowerFallingShort();

                //if (energyConserveRequest.getBulkRequest().equals("N")) {
                int communitySentPower = energyConserveRequest.getCommunitySentPower();
                int communityShortFall = energyConserveRequest.getCurrentFalingShortPower();
                int currentEnergyReservePower = userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower();

                int resultantPowerAtEnergyReserve = 0;
                int currentTotalCommunityPower = 0;
                int netPowerCommunityPower = 0;
                if ((communitySentPower > 0) && (communityShortFall == 0)) { //Check* ==0 ******
                    //update the community and energy Reserve Power*****
                    //Also the requests of community and Energy Reserve*
                    resultantPowerAtEnergyReserve = currentEnergyReservePower + communitySentPower;

                    //increase energy reserve power
                    userAccount.getEmployee().getProsumer().setEnergyConserveAvailablePower(resultantPowerAtEnergyReserve);

                    //Decrease community power
                    currentTotalCommunityPower = energyConserveRequest.getSender().getEmployee().getProsumer().getCurrentExcessPower();
                    netPowerCommunityPower = currentTotalCommunityPower - communitySentPower;
                    energyConserveRequest.getSender().getEmployee().getProsumer().setCurrentExcessPower(netPowerCommunityPower);
                    //userAccount.getEmployee().getProsumer().setCurrentExcessPower(totalExcessPower);                           
                    //energyConserveRequest.getSender().getEmployee().getProsumer().get

                    energyConserveRequest.setStatus("Processed");
                    energyConserveRequest.setResult("Accepted");
                    energyConserveRequest.setMessage("Request has been Processed");

                    String powerCompensated = "N";
                    if (energyConserveRequest.getBulkRequest().equals("N")) {
                        energyConserveRequest.getPowerManagementWorkRequest().setResult("Accepted");
                        energyConserveRequest.getPowerManagementWorkRequest().setStatus("Processed");
                        energyConserveRequest.getPowerManagementWorkRequest().setMessage("Request has been Processed");
                        powerCompensated = "Y";
                    } else { //Bulk Process*****
                        //if (communityEnterprise != null) {
                        if (energyConserveRequest.getCommunityEnterprise() != null) {
                            //for (WorkRequest WR : communityEnterprise.getWorkQueue().getWorkRequestList()) {
                            for (WorkRequest WR : energyConserveRequest.getCommunityEnterprise().getWorkQueue().getWorkRequestList()) {
                                if (WR.getStatus().equalsIgnoreCase("Processing")) {
                                    if (WR.getReceiver().equals(energyConserveRequest.getSender())) {//Check****
                                        if (WR.getSender().getEmployee().getCommunity().equalsIgnoreCase(energyConserveRequest.getCommunityEnterprise().getName())) {
                                            WR.setStatus("Processed");
                                            WR.setMessage("Request has been Processed");
                                            ((PowerManagementWorkRequest) WR).setResult("Accepted");
                                            powerCompensated = "Y";
                                            //energyConserveRequest.setStatus("Processed");
                                            //energyConserveRequest.setResult("Accepted");
                                        }
                                    }
                                }
                            }
                        }

//                            String communityUserNameSender = energyConserveRequest.getSender().getUsername();
//                            for (WorkRequest WR : energyConserveRequest.getWorkQueue().getWorkRequestList()) {
//                                if (WR.getStatus().equalsIgnoreCase("Processing")) {
//                                    String communityUserNameReceiver = WR.getReceiver().getUsername();
//                                    if (communityUserNameReceiver.equalsIgnoreCase(communityUserNameSender)) {
//                                        WR.setStatus("Processed");
//                                        ((PowerManagementWorkRequest) WR).setResult("Accepted");
//
//                                    }
//                                }
//                            }
                    }
                    populateTable();
                    if (powerCompensated == "Y") {
                        energyConserveRequest.setReceiver(userAccount); //Setting Receiver once the request is processed
                        JOptionPane.showMessageDialog(this, "The selected Request is Processed", "Single Requests", JOptionPane.INFORMATION_MESSAGE);
                    }
                    txtTotalAvailablePowerFrmCommunity.setText(Integer.toString(totalPowerFromCommunity));
                    txtTotalPowerFallingShortCommunity.setText(Integer.toString(0));
                    txtTotalAvailablePowerAtEnergyConserve.setText(Integer.toString(userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower()));
                }
                //Add Logic for Community Short Fall****
                resultantPowerAtEnergyReserve = 0;
                currentTotalCommunityPower = 0;
                netPowerCommunityPower = 0;
                if (communityShortFall > 0) {

                    if (currentEnergyReservePower < communityShortFall) {
                        JOptionPane.showMessageDialog(this, "Power at Energy Reserve is falling Short, Thisrequest should be processed by another Community Reserve", "Single Request", JOptionPane.ERROR_MESSAGE);   //Check if any other flow can be performed here *****
                        return;
                    }

                    resultantPowerAtEnergyReserve = currentEnergyReservePower - communityShortFall;

                    userAccount.getEmployee().getProsumer().setEnergyConserveAvailablePower(resultantPowerAtEnergyReserve);

                    //Increase community power
                    currentTotalCommunityPower = energyConserveRequest.getSender().getEmployee().getProsumer().getCurrentExcessPower();
                    netPowerCommunityPower = currentTotalCommunityPower + communityShortFall;
                    energyConserveRequest.getSender().getEmployee().getProsumer().setCurrentExcessPower(netPowerCommunityPower);
                    //userAccount.getEmployee().getProsumer().setCurrentExcessPower(totalExcessPower);                           
                    //energyConserveRequest.getSender().getEmployee().getProsumer().get

                    energyConserveRequest.setStatus("Processed");
                    energyConserveRequest.setResult("Accepted");
                    energyConserveRequest.setMessage("Request has been Processed");

                    String powerCompensated = "N";
                    if (energyConserveRequest.getBulkRequest().equals("N")) {
                        //Single consumer request are not processed, so we might not need additional logic as written in else part
                        //check*****
                        energyConserveRequest.getPowerManagementWorkRequest().setResult("Accepted");
                        energyConserveRequest.getPowerManagementWorkRequest().setStatus("Processed");
                        energyConserveRequest.getPowerManagementWorkRequest().setMessage("Request has been Processed");
                        powerCompensated = "Y";
                    } else {
                        //if (communityEnterprise != null) {
                        if (energyConserveRequest.getCommunityEnterprise() != null) {
                            //for (WorkRequest WR : communityEnterprise.getWorkQueue().getWorkRequestList()) {
                            for (WorkRequest WR : energyConserveRequest.getCommunityEnterprise().getWorkQueue().getWorkRequestList()) {
                                if (WR.getStatus().equalsIgnoreCase("Processing")) {
                                    if (WR.getReceiver().equals(energyConserveRequest.getSender())) {//Check****
                                        if (WR.getSender().getEmployee().getCommunity().equalsIgnoreCase(energyConserveRequest.getCommunityEnterprise().getName())) {
                                            WR.setStatus("Processed");
                                            WR.setMessage("Request has been Processed");
                                            int curExcessPower = WR.getSender().getEmployee().getProsumer().getCurrentExcessPower();
                                            int curFallingShorPower = WR.getSender().getEmployee().getProsumer().getCurrentPowerFallingShort();

                                            if (curFallingShorPower > 0) {
                                                ((PowerManagementWorkRequest) WR).setResult("Compensated");
                                                WR.getSender().getEmployee().getProsumer().setCurrentPowerFallingShort(0);
                                            } else {
                                                ((PowerManagementWorkRequest) WR).setResult("Accepted");
                                                WR.getSender().getEmployee().getProsumer().setCurrentExcessPower(0);
                                                powerCompensated = "Y";
                                            }
                                            //energyConserveRequest.setStatus("Processed");
                                            //energyConserveRequest.setResult("Accepted");
                                        }
                                    }
                                }
                            }
                        }
                    }
                    populateTable();

                    if (powerCompensated == "Y") {
                        energyConserveRequest.setReceiver(userAccount); //Setting Receiver once the request is processed
                        energyConserveRequest.setMessage("powerCompensated");
                        JOptionPane.showMessageDialog(this, "The selected Request is Processed", "Single Requests", JOptionPane.INFORMATION_MESSAGE);
                    }
                    txtTotalAvailablePowerFrmCommunity.setText(Integer.toString(totalPowerFromCommunity));
                    txtTotalPowerFallingShortCommunity.setText(Integer.toString(totalPowerFallingShortfromCommunity));
                    txtTotalAvailablePowerAtEnergyConserve.setText(Integer.toString(userAccount.getEmployee().getProsumer().getEnergyConserveAvailablePower()));
                }

                //} else { //Bulk Process
//                    String communityUserNameSender = energyConserveRequest.getSender().getUsername();
//                    for (WorkRequest WR : energyConserveRequest.getWorkQueue().getWorkRequestList()) {
//                        if (WR.getStatus().equalsIgnoreCase("Processing")) {
//                            String communityUserNameReceiver = WR.getReceiver().getUsername();
//                            if (communityUserNameReceiver.equalsIgnoreCase(communityUserNameSender)) {
//                                WR.setStatus("Processed");
//                                ((PowerManagementWorkRequest) WR).setResult("Accepted");
//
//                            }
//                        }
//                    }
                //}
//                if (powerfallingshortCheck > 0) {
//                    //Consumer has been selected
//                    JOptionPane.showMessageDialog(this, "Consumer requests are processed only in Bulk, Please select a PowerManagement Request to process ", "Single Request", JOptionPane.ERROR_MESSAGE);
//                    return;
//                } else {
//                    //Prosumer has been selected
//
////                    ProcessEachWorkRequestJPanel processWorkRequestJPanel = new ProcessEachWorkRequestJPanel(userProcessContainer, userAccount, request, enterprise, network, business);
////                    userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
////                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
////                    layout.next(userProcessContainer);
//                }
            } else {
                JOptionPane.showMessageDialog(this, "The selected Request is either Processed or under Processing, Please select a new Request", "Single Requests", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_BtnProcessEachRequestActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnProcessBulkRequest;
    private javax.swing.JButton BtnProcessEachRequest;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTextField txtTotalAvailablePowerAtEnergyConserve;
    private javax.swing.JTextField txtTotalAvailablePowerFrmCommunity;
    private javax.swing.JTextField txtTotalPowerFallingShortCommunity;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
